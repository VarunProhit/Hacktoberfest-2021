#include <bits/stdc++.h>
using namespace std;

string txt,pat;
int lps[100005];

void computeLPSArray(int M) {
	int len = 0;

	lps[0] = 0;
	int i = 1;

	while (i < M) {
		if (pat[i] == pat[len]) {
			len++;
			lps[i] = len;
			i++;
		}
		else {
			if (len != 0) {
				len = lps[len - 1];
			}
			else {
				lps[i] = 0;
				i++;
			}
		}
	}
}

// Prints occurrences of txt[] in pat[]
void KMPSearch()
{
	int M = pat.length();
	int N = txt.length();

	computeLPSArray(M);

	int i = 0; // index for txt[]
	int j = 0; // index for pat[]
	while (i < N) {
		if (pat[j] == txt[i]) {
			j++;
			i++;
		}

		if (j == M) {
			printf("Found pattern at index %d ", i - j);
			j = lps[j - 1];
		}

		else if (i < N && pat[j] != txt[i]) {
			if (j != 0)
				j = lps[j - 1];
			else
				i = i + 1;
		}
	}
}

// Driver program to test above function
int main()
{
	cin >> txt;
	cin >> pat;

	KMPSearch();
	return 0;
}
